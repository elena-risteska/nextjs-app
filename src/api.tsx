/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new account
         * @description Create a new account with the provided data.
         */
        post: operations["86b99167953f28d81ec79b565fdc5f52"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login to your account
         * @description login to your account with the provided data.
         */
        post: operations["adbe720dc4dcedd623b9794954f55254"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Log out of the account.
         * @description Revoke the token of the account provided.
         */
        post: operations["df15ebaca40e163ffb90417c54b30ca2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh token
         * @description Refresh the user's current token.
         */
        post: operations["af52ccf9149eaea8e4f47fb21aef3caa"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/time-entries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of all time entries
         * @description Retrieve a paginated list of all time entries. User has to have role 'hr'.
         */
        get: operations["5ecd955e81c5c8316c34b8c24726c1e5"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/{user_id}/time-entries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of all time entries for specified user
         * @description Retrieve a paginated list of all time entries for specified user.  User has to have role 'hr' or role 'user' with the same id as {user_id}..
         */
        get: operations["fab0526f8296bebdbc84ba18d4a9da63"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/time-entries/{entry_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a specific time entry.
         * @description Retrieve a time entry by specified id. User has to have role 'hr'.
         */
        get: operations["a5513ac1106fc69bff3a427be9e870e8"];
        /**
         * Update a time entry
         * @description Update time entry's information by id. User has to have role 'hr'.
         */
        put: operations["797738dff25258e255e6c2651b35109a"];
        post?: never;
        /**
         * Delete a time entry
         * @description Delete a time entry by id. User has to have role 'hr'.
         */
        delete: operations["d04976a3ff3a4fdb636946f87e168763"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/time-entries/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new time entries
         * @description Create one or multiple new time entries with the provided data. User has to have role 'hr'.
         */
        post: operations["ff08c0a673661d06beff0821481bfb82"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/time-entries/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Generate time entries
         * @description Generate time entries for the previous week (Monday - Friday) for all users where there is no specific time entry for the day of the week for the specific user.
         */
        get: operations["7035644fb4b8d398bc244cafb97ee93f"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/spreadsheet/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Generate spreadsheet
         * @description Generates spreadsheet for a specific month for all users.
         */
        get: operations["c4e5edec0722e43f68f618f618db2a5c"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of users
         * @description Retrieve a paginated list of users. User has to have role 'hr'.
         */
        get: operations["c457726701591d1183b53aa71fc13441"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new user
         * @description Create a new user with the provided data. User has to have role 'hr'.
         */
        post: operations["d37ea9642c2cfbe867361ca7da44eec7"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update a user
         * @description Update a user's information by id. The update can be done by a user with role 'hr', or by the specific user themself.
         */
        put: operations["c64f78766f4915182147dd62bcc1e3f3"];
        post?: never;
        /**
         * Delete a user
         * @description Delete a user by id. The removal can be done by a user with role 'hr'.
         */
        delete: operations["8813fccf55a87ec7b1237ecdee00419f"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "86b99167953f28d81ec79b565fdc5f52": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Full name of the user.
                     * @example John Doe
                     */
                    name?: string;
                    /**
                     * @description Email of the user.
                     * @example johndoe@gmail.com
                     */
                    email?: string;
                    /**
                     * @description Account password.
                     * @example 12345678
                     */
                    password?: string;
                    /**
                     * @description Re-enter password.
                     * @example 12345678
                     */
                    password_confirmation?: string;
                    /**
                     * @description Role of the user. One of: 'admin', 'hr', 'manager', 'user'.
                     * @example hr
                     */
                    role?: string;
                };
            };
        };
        responses: {
            /** @description User successfully created. Returns token for authorization. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unprocessable content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    adbe720dc4dcedd623b9794954f55254: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Email of the user.
                     * @example johndoe@gmail.com
                     */
                    email?: string;
                    /**
                     * @description Account password.
                     * @example 12345678
                     */
                    password?: string;
                };
            };
        };
        responses: {
            /** @description User logged in. Returns token for authorization. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Provided password doesn't match the account. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description There is no registered account with that email. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unprocessable content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    df15ebaca40e163ffb90417c54b30ca2: {
        parameters: {
            query?: never;
            header: {
                /** @description Bearer token used for authentication */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User successfully logged out */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    af52ccf9149eaea8e4f47fb21aef3caa: {
        parameters: {
            query?: never;
            header: {
                /** @description Bearer token used for authentication */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The previousle generated refresh token.
                     * @example def50200c53b92fb01c227de3a0dd49e1cf844d643fcfb12ebcf35650788e6ccc779e4f97cd6c63b5c466ee5f908c2077c4086cc0b9af03e7bca54efcff6249b16d9c57f30a945e0c1591e7115c695d9e48dc77e37fbc1efa4406c1a8d017608e63d50a90eea2e71d2ae78d2528e8affe6bb27da23c8aa01157c74a5696ad1ba65a14ec3d842edb38479cf8a26717e957a666aadc2b2dffa6c72200d13e49a7b613c3f6772a94106e180182f314288e7d732a657e47d4f9a704f55d852eca0eaa6cc005eabb2b5910366a7083e3d47f7d7b0b56d2192018bdf7f45761b1f7087fa83fbc4e84378d5e2459bc2b3a1e3fb9543f9c7432e450953486c971373f9dc232ffbf39e5f1e2314a24d49f125d1f15e2272d1c67e32e25fa461e0e427c54b0f9b04c7f838be3c66435b1ce181043a53418a8bbf0a02b83b4717a74c905002eb0d7d2c50b28c61ca55468fb67551b638e5aea983a9bbb150dd0f9b2ab35254b0
                     */
                    refresh_token?: string;
                };
            };
        };
        responses: {
            /** @description Token successfully refreshed. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Content not acceptable. */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    "5ecd955e81c5c8316c34b8c24726c1e5": {
        parameters: {
            query?: {
                /** @description Number of users per page */
                per_page?: number;
                /** @description Number of current page */
                page?: number;
            };
            header: {
                /** @description Bearer token used for authentication */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of time entries. If there are no time entries, 'data' is an empty array. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    fab0526f8296bebdbc84ba18d4a9da63: {
        parameters: {
            query?: {
                /** @description Number of users per page */
                per_page?: number;
                /** @description Number of current page */
                page?: number;
            };
            header: {
                /** @description Bearer token used for authentication */
                Authorization: string;
            };
            path: {
                /** @description Id of the user */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of time entries for user. If there are no time entries, 'data' is an empty array. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    a5513ac1106fc69bff3a427be9e870e8: {
        parameters: {
            query?: never;
            header: {
                /** @description Bearer token used for authentication */
                Authorization: string;
            };
            path: {
                /** @description Id of the specific time entry. */
                entry_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieves data for a specific time entry. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Time entry not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    "797738dff25258e255e6c2651b35109a": {
        parameters: {
            query?: never;
            header: {
                /** @description Bearer token used for authentication */
                Authorization: string;
            };
            path: {
                /** @description ID of the time entry to update */
                entry_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Name of the time entry type. One of ['clock_in', 'clock_out', 'parental_leave', 'holiday']
                     * @example clock_in
                     */
                    time_entry_type?: number;
                    /**
                     * @description The date of the time entry. Format: Y-m-d.
                     * @example 2020-10-23
                     */
                    date?: string;
                    /**
                     * @description The time of the time entry. Format: H:i.
                     * @example 08:00
                     */
                    time?: string;
                };
            };
        };
        responses: {
            /** @description Time entry successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Time entry not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unprocessable content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    d04976a3ff3a4fdb636946f87e168763: {
        parameters: {
            query?: never;
            header: {
                /** @description Bearer token used for authentication */
                Authorization: string;
            };
            path: {
                /** @description ID of the time entry to delete */
                entry_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Time entry successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Time entry not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    ff08c0a673661d06beff0821481bfb82: {
        parameters: {
            query?: never;
            header: {
                /** @description Bearer token used for authentication */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Name of the time entry type. One of ['clock_in', 'clock_out', 'parental_leave', 'holiday']
                     * @example clock_in
                     */
                    time_entry_type?: number;
                    /**
                     * @description The date and time of the time entry. Format: Y-m-dTH:i.
                     * @example 2020-10-23T08:00
                     */
                    date_time?: string;
                    /**
                     * @description Arrays of users you want to add a time entry for.
                     * @example [1,2,5]
                     */
                    user_ids?: number[];
                };
            };
        };
        responses: {
            /** @description Time entries successfully created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unprocessable content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    "7035644fb4b8d398bc244cafb97ee93f": {
        parameters: {
            query?: never;
            header: {
                /** @description Bearer token used for authentication */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No need for creating time entries. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Time entries created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    c4e5edec0722e43f68f618f618db2a5c: {
        parameters: {
            query: {
                /** @description Number of the month you want to generate a spreadsheet for. */
                month: number;
                /** @description The specific year for the month. Min: 1900, Max: current */
                year: number;
            };
            header: {
                /** @description Bearer token used for authentication */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Downloads a file with a specific data from the query parameters provided */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "vnd.ms-excel": string;
                };
            };
            /** @description Unprocessable content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    c457726701591d1183b53aa71fc13441: {
        parameters: {
            query?: {
                /** @description Number of users per page */
                per_page?: number;
                /** @description Number of current page */
                page?: number;
            };
            header: {
                /** @description Bearer token used for authentication */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of users. If there are no users, 'data' is an empty array. User has to have role 'hr'. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    d37ea9642c2cfbe867361ca7da44eec7: {
        parameters: {
            query?: never;
            header: {
                /** @description Bearer token used for authentication */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Full name of the user.
                     * @example John Doe
                     */
                    name?: string;
                    /**
                     * @description Email of the user.
                     * @example johndoe@gmail.com
                     */
                    email?: string;
                    /**
                     * @description Account password.
                     * @example 12345678
                     */
                    password?: string;
                    /**
                     * @description Re-enter password.
                     * @example 12345678
                     */
                    password_confirmation?: string;
                    /**
                     * @description Role of the user. One of: 'admin', 'hr', 'manager', 'user'.
                     * @example hr
                     */
                    role?: string;
                };
            };
        };
        responses: {
            /** @description User successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unprocessable content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    c64f78766f4915182147dd62bcc1e3f3: {
        parameters: {
            query?: never;
            header: {
                /** @description Bearer token used for authentication */
                Authorization: string;
            };
            path: {
                /** @description ID of the user to update */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Full name of the user.
                     * @example John Doe New
                     */
                    name?: string;
                    /**
                     * @description Email of the user.
                     * @example johndoe@gmail.com
                     */
                    email?: string;
                    /**
                     * @description Role of the user. One of: 'admin', 'hr', 'manager', 'user'.
                     * @example hr
                     */
                    role?: string;
                };
            };
        };
        responses: {
            /** @description User successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description User not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unprocessable content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    "8813fccf55a87ec7b1237ecdee00419f": {
        parameters: {
            query?: never;
            header: {
                /** @description Bearer token used for authentication */
                Authorization: string;
            };
            path: {
                /** @description ID of the user to delete */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
